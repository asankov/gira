// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asankov/gira/cmd/api/server (interfaces: UserGamesModel)

// Package fixtures is a generated GoMock package.
package fixtures

import (
	models "github.com/asankov/gira/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// UserGamesModelMock is a mock of UserGamesModel interface
type UserGamesModelMock struct {
	ctrl     *gomock.Controller
	recorder *UserGamesModelMockMockRecorder
}

// UserGamesModelMockMockRecorder is the mock recorder for UserGamesModelMock
type UserGamesModelMockMockRecorder struct {
	mock *UserGamesModelMock
}

// NewUserGamesModelMock creates a new mock instance
func NewUserGamesModelMock(ctrl *gomock.Controller) *UserGamesModelMock {
	mock := &UserGamesModelMock{ctrl: ctrl}
	mock.recorder = &UserGamesModelMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *UserGamesModelMock) EXPECT() *UserGamesModelMockMockRecorder {
	return m.recorder
}

// ChangeGameStatus mocks base method
func (m *UserGamesModelMock) ChangeGameStatus(arg0, arg1 string, arg2 models.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeGameStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeGameStatus indicates an expected call of ChangeGameStatus
func (mr *UserGamesModelMockMockRecorder) ChangeGameStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeGameStatus", reflect.TypeOf((*UserGamesModelMock)(nil).ChangeGameStatus), arg0, arg1, arg2)
}

// GetAvailableGamesFor mocks base method
func (m *UserGamesModelMock) GetAvailableGamesFor(arg0 string) ([]*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableGamesFor", arg0)
	ret0, _ := ret[0].([]*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableGamesFor indicates an expected call of GetAvailableGamesFor
func (mr *UserGamesModelMockMockRecorder) GetAvailableGamesFor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableGamesFor", reflect.TypeOf((*UserGamesModelMock)(nil).GetAvailableGamesFor), arg0)
}

// GetUserGames mocks base method
func (m *UserGamesModelMock) GetUserGames(arg0 string) ([]*models.UserGame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGames", arg0)
	ret0, _ := ret[0].([]*models.UserGame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGames indicates an expected call of GetUserGames
func (mr *UserGamesModelMockMockRecorder) GetUserGames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGames", reflect.TypeOf((*UserGamesModelMock)(nil).GetUserGames), arg0)
}

// GetUserGamesGrouped mocks base method
func (m *UserGamesModelMock) GetUserGamesGrouped(arg0 string) (map[models.Status][]*models.UserGame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGamesGrouped", arg0)
	ret0, _ := ret[0].(map[models.Status][]*models.UserGame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGamesGrouped indicates an expected call of GetUserGamesGrouped
func (mr *UserGamesModelMockMockRecorder) GetUserGamesGrouped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGamesGrouped", reflect.TypeOf((*UserGamesModelMock)(nil).GetUserGamesGrouped), arg0)
}

// LinkGameToUser mocks base method
func (m *UserGamesModelMock) LinkGameToUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkGameToUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkGameToUser indicates an expected call of LinkGameToUser
func (mr *UserGamesModelMockMockRecorder) LinkGameToUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkGameToUser", reflect.TypeOf((*UserGamesModelMock)(nil).LinkGameToUser), arg0, arg1)
}

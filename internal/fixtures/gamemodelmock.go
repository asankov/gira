// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asankov/gira/cmd/api/server (interfaces: GameModel)

// Package fixtures is a generated GoMock package.
package fixtures

import (
	models "github.com/asankov/gira/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// GameModelMock is a mock of GameModel interface
type GameModelMock struct {
	ctrl     *gomock.Controller
	recorder *GameModelMockMockRecorder
}

// GameModelMockMockRecorder is the mock recorder for GameModelMock
type GameModelMockMockRecorder struct {
	mock *GameModelMock
}

// NewGameModelMock creates a new mock instance
func NewGameModelMock(ctrl *gomock.Controller) *GameModelMock {
	mock := &GameModelMock{ctrl: ctrl}
	mock.recorder = &GameModelMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *GameModelMock) EXPECT() *GameModelMockMockRecorder {
	return m.recorder
}

// AllForUser mocks base method
func (m *GameModelMock) AllForUser(arg0 string) ([]*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllForUser", arg0)
	ret0, _ := ret[0].([]*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllForUser indicates an expected call of AllForUser
func (mr *GameModelMockMockRecorder) AllForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllForUser", reflect.TypeOf((*GameModelMock)(nil).AllForUser), arg0)
}

// ChangeGameProgress mocks base method
func (m *GameModelMock) ChangeGameProgress(arg0, arg1 string, arg2 *models.GameProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeGameProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeGameProgress indicates an expected call of ChangeGameProgress
func (mr *GameModelMockMockRecorder) ChangeGameProgress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeGameProgress", reflect.TypeOf((*GameModelMock)(nil).ChangeGameProgress), arg0, arg1, arg2)
}

// ChangeGameStatus mocks base method
func (m *GameModelMock) ChangeGameStatus(arg0, arg1 string, arg2 models.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeGameStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeGameStatus indicates an expected call of ChangeGameStatus
func (mr *GameModelMockMockRecorder) ChangeGameStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeGameStatus", reflect.TypeOf((*GameModelMock)(nil).ChangeGameStatus), arg0, arg1, arg2)
}

// DeleteGame mocks base method
func (m *GameModelMock) DeleteGame(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGame indicates an expected call of DeleteGame
func (mr *GameModelMockMockRecorder) DeleteGame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*GameModelMock)(nil).DeleteGame), arg0, arg1)
}

// Get mocks base method
func (m *GameModelMock) Get(arg0 string) (*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *GameModelMockMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*GameModelMock)(nil).Get), arg0)
}

// Insert mocks base method
func (m *GameModelMock) Insert(arg0 *models.Game) (*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *GameModelMockMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*GameModelMock)(nil).Insert), arg0)
}

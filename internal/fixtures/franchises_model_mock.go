// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gira-games/api/cmd/api/server (interfaces: FranchiseModel)

// Package fixtures is a generated GoMock package.
package fixtures

import (
	models "github.com/gira-games/api/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// FranchiseModelMock is a mock of FranchiseModel interface
type FranchiseModelMock struct {
	ctrl     *gomock.Controller
	recorder *FranchiseModelMockMockRecorder
}

// FranchiseModelMockMockRecorder is the mock recorder for FranchiseModelMock
type FranchiseModelMockMockRecorder struct {
	mock *FranchiseModelMock
}

// NewFranchiseModelMock creates a new mock instance
func NewFranchiseModelMock(ctrl *gomock.Controller) *FranchiseModelMock {
	mock := &FranchiseModelMock{ctrl: ctrl}
	mock.recorder = &FranchiseModelMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FranchiseModelMock) EXPECT() *FranchiseModelMockMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *FranchiseModelMock) All() ([]*models.Franchise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*models.Franchise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *FranchiseModelMockMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*FranchiseModelMock)(nil).All))
}

// Insert mocks base method
func (m *FranchiseModelMock) Insert(arg0 *models.Franchise) (*models.Franchise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*models.Franchise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *FranchiseModelMockMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*FranchiseModelMock)(nil).Insert), arg0)
}
